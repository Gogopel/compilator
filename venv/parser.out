Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> prog
Rule 1     prog -> VAR dec_list OPEN_FIG stmt_list CLOSE_FIG
Rule 2     prog -> VAR dec_list def_list OPEN_FIG stmt_list CLOSE_FIG
Rule 3     def_list -> def
Rule 4     def_list -> def_list SEMI_COLON def
Rule 5     def -> DEF ID OPEN_PAREN dec_list CLOSE_PAREN OPEN_FIG stmt_list_def CLOSE_FIG
Rule 6     def -> DEF ID OPEN_PAREN dec_list CLOSE_PAREN OPEN_FIG VAR dec_list stmt_list_def CLOSE_FIG
Rule 7     defstmt -> ID OPEN_PAREN args CLOSE_PAREN
Rule 8     args -> arg
Rule 9     args -> args SEMI_COLON arg
Rule 10    arg -> ID
Rule 11    arg -> NUMBER_INT
Rule 12    arg -> NUMBER_REAL
Rule 13    arg -> OPEN_PAREN exp CLOSE_PAREN
Rule 14    dec_list -> dec
Rule 15    dec_list -> dec_list SEMI_COLON dec
Rule 16    dec -> id_list DOUBLE_POINT type
Rule 17    type -> INT
Rule 18    type -> REAL
Rule 19    type -> STRING
Rule 20    id_list -> ID
Rule 21    id_list -> id_list COMA ID
Rule 22    stmt_list -> stmt
Rule 23    stmt_list -> stmt_list SEMI_COLON stmt
Rule 24    stmt -> assign
Rule 25    stmt -> print
Rule 26    stmt -> while
Rule 27    stmt -> if
Rule 28    stmt_list_if -> stmt_if
Rule 29    stmt_list_if -> stmt_list_if SEMI_COLON stmt_if
Rule 30    stmt_if -> assign
Rule 31    stmt_if -> print
Rule 32    stmt_if -> while
Rule 33    stmt_if -> if
Rule 34    stmt_if -> CONTINUE
Rule 35    stmt_if -> BREAK
Rule 36    stmt_list_def -> stmt_def
Rule 37    stmt_list_def -> stmt_list_def SEMI_COLON stmt_def
Rule 38    stmt_def -> assign
Rule 39    stmt_def -> print
Rule 40    stmt_def -> while
Rule 41    stmt_def -> if
Rule 42    stmt_def -> return
Rule 43    return -> RETURN exp
Rule 44    assign -> ID PRISV exp
Rule 45    assign -> ID PRISV STRING
Rule 46    exp -> term
Rule 47    exp -> exp SUM term
Rule 48    exp -> exp SUB term
Rule 49    term -> factor
Rule 50    term -> term MUL factor
Rule 51    term -> term DIV factor
Rule 52    factor -> defstmt
Rule 53    factor -> ID
Rule 54    factor -> NUMBER_INT
Rule 55    factor -> NUMBER_REAL
Rule 56    factor -> OPEN_PAREN exp CLOSE_PAREN
Rule 57    print -> PRINT OPEN_PAREN exp CLOSE_PAREN
Rule 58    print -> PRINT OPEN_PAREN STRING CLOSE_PAREN
Rule 59    while -> WHILE bool_exp DO OPEN_FIG stmt_list CLOSE_FIG
Rule 60    if -> IF bool_exp THEN OPEN_FIG stmt_list_if CLOSE_FIG
Rule 61    bool_exp -> bool_exp OR bool_exp_term
Rule 62    bool_exp -> bool_exp_term
Rule 63    bool_exp -> NOT bool_exp
Rule 64    bool_exp -> bool
Rule 65    bool_exp_term -> bool_exp_term AND bool
Rule 66    bool_exp_term -> bool
Rule 67    bool -> OPEN_PAREN exp RAVNO exp CLOSE_PAREN
Rule 68    bool -> OPEN_PAREN exp MORE exp CLOSE_PAREN
Rule 69    bool -> OPEN_PAREN exp LESS exp CLOSE_PAREN

Terminals, with rules where they appear

AND                  : 65
BREAK                : 35
CLOSE_FIG            : 1 2 5 6 59 60
CLOSE_PAREN          : 5 6 7 13 56 57 58 67 68 69
COMA                 : 21
CONTINUE             : 34
DEF                  : 5 6
DIV                  : 51
DO                   : 59
DOUBLE_POINT         : 16
ID                   : 5 6 7 10 20 21 44 45 53
IF                   : 60
INT                  : 17
LESS                 : 69
MORE                 : 68
MUL                  : 50
NOT                  : 63
NUMBER_INT           : 11 54
NUMBER_REAL          : 12 55
OPEN_FIG             : 1 2 5 6 59 60
OPEN_PAREN           : 5 6 7 13 56 57 58 67 68 69
OR                   : 61
PRINT                : 57 58
PRISV                : 44 45
RAVNO                : 67
REAL                 : 18
RETURN               : 43
SEMI_COLON           : 4 9 15 23 29 37
STRING               : 19 45 58
SUB                  : 48
SUM                  : 47
THEN                 : 60
VAR                  : 1 2 6
WHILE                : 59
error                : 

Nonterminals, with rules where they appear

arg                  : 8 9
args                 : 7 9
assign               : 24 30 38
bool                 : 64 65 66
bool_exp             : 59 60 61 63
bool_exp_term        : 61 62 65
dec                  : 14 15
dec_list             : 1 2 5 6 6 15
def                  : 3 4
def_list             : 2 4
defstmt              : 52
exp                  : 13 43 44 47 48 56 57 67 67 68 68 69 69
factor               : 49 50 51
id_list              : 16 21
if                   : 27 33 41
print                : 25 31 39
prog                 : 0
return               : 42
stmt                 : 22 23
stmt_def             : 36 37
stmt_if              : 28 29
stmt_list            : 1 2 23 59
stmt_list_def        : 5 6 37
stmt_list_if         : 29 60
term                 : 46 47 48 50 51
type                 : 16
while                : 26 32 40

Parsing method: LALR

state 0

    (0) S' -> . prog
    (1) prog -> . VAR dec_list OPEN_FIG stmt_list CLOSE_FIG
    (2) prog -> . VAR dec_list def_list OPEN_FIG stmt_list CLOSE_FIG

    VAR             shift and go to state 2

    prog                           shift and go to state 1

state 1

    (0) S' -> prog .



state 2

    (1) prog -> VAR . dec_list OPEN_FIG stmt_list CLOSE_FIG
    (2) prog -> VAR . dec_list def_list OPEN_FIG stmt_list CLOSE_FIG
    (14) dec_list -> . dec
    (15) dec_list -> . dec_list SEMI_COLON dec
    (16) dec -> . id_list DOUBLE_POINT type
    (20) id_list -> . ID
    (21) id_list -> . id_list COMA ID

    ID              shift and go to state 6

    dec_list                       shift and go to state 3
    dec                            shift and go to state 4
    id_list                        shift and go to state 5

state 3

    (1) prog -> VAR dec_list . OPEN_FIG stmt_list CLOSE_FIG
    (2) prog -> VAR dec_list . def_list OPEN_FIG stmt_list CLOSE_FIG
    (15) dec_list -> dec_list . SEMI_COLON dec
    (3) def_list -> . def
    (4) def_list -> . def_list SEMI_COLON def
    (5) def -> . DEF ID OPEN_PAREN dec_list CLOSE_PAREN OPEN_FIG stmt_list_def CLOSE_FIG
    (6) def -> . DEF ID OPEN_PAREN dec_list CLOSE_PAREN OPEN_FIG VAR dec_list stmt_list_def CLOSE_FIG

    OPEN_FIG        shift and go to state 7
    SEMI_COLON      shift and go to state 9
    DEF             shift and go to state 11

    def_list                       shift and go to state 8
    def                            shift and go to state 10

state 4

    (14) dec_list -> dec .

    OPEN_FIG        reduce using rule 14 (dec_list -> dec .)
    SEMI_COLON      reduce using rule 14 (dec_list -> dec .)
    DEF             reduce using rule 14 (dec_list -> dec .)
    CLOSE_PAREN     reduce using rule 14 (dec_list -> dec .)
    ID              reduce using rule 14 (dec_list -> dec .)
    PRINT           reduce using rule 14 (dec_list -> dec .)
    WHILE           reduce using rule 14 (dec_list -> dec .)
    IF              reduce using rule 14 (dec_list -> dec .)
    RETURN          reduce using rule 14 (dec_list -> dec .)


state 5

    (16) dec -> id_list . DOUBLE_POINT type
    (21) id_list -> id_list . COMA ID

    DOUBLE_POINT    shift and go to state 12
    COMA            shift and go to state 13


state 6

    (20) id_list -> ID .

    DOUBLE_POINT    reduce using rule 20 (id_list -> ID .)
    COMA            reduce using rule 20 (id_list -> ID .)


state 7

    (1) prog -> VAR dec_list OPEN_FIG . stmt_list CLOSE_FIG
    (22) stmt_list -> . stmt
    (23) stmt_list -> . stmt_list SEMI_COLON stmt
    (24) stmt -> . assign
    (25) stmt -> . print
    (26) stmt -> . while
    (27) stmt -> . if
    (44) assign -> . ID PRISV exp
    (45) assign -> . ID PRISV STRING
    (57) print -> . PRINT OPEN_PAREN exp CLOSE_PAREN
    (58) print -> . PRINT OPEN_PAREN STRING CLOSE_PAREN
    (59) while -> . WHILE bool_exp DO OPEN_FIG stmt_list CLOSE_FIG
    (60) if -> . IF bool_exp THEN OPEN_FIG stmt_list_if CLOSE_FIG

    ID              shift and go to state 20
    PRINT           shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23

    stmt_list                      shift and go to state 14
    stmt                           shift and go to state 15
    assign                         shift and go to state 16
    print                          shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19

state 8

    (2) prog -> VAR dec_list def_list . OPEN_FIG stmt_list CLOSE_FIG
    (4) def_list -> def_list . SEMI_COLON def

    OPEN_FIG        shift and go to state 24
    SEMI_COLON      shift and go to state 25


state 9

    (15) dec_list -> dec_list SEMI_COLON . dec
    (16) dec -> . id_list DOUBLE_POINT type
    (20) id_list -> . ID
    (21) id_list -> . id_list COMA ID

    ID              shift and go to state 6

    dec                            shift and go to state 26
    id_list                        shift and go to state 5

state 10

    (3) def_list -> def .

    OPEN_FIG        reduce using rule 3 (def_list -> def .)
    SEMI_COLON      reduce using rule 3 (def_list -> def .)


state 11

    (5) def -> DEF . ID OPEN_PAREN dec_list CLOSE_PAREN OPEN_FIG stmt_list_def CLOSE_FIG
    (6) def -> DEF . ID OPEN_PAREN dec_list CLOSE_PAREN OPEN_FIG VAR dec_list stmt_list_def CLOSE_FIG

    ID              shift and go to state 27


state 12

    (16) dec -> id_list DOUBLE_POINT . type
    (17) type -> . INT
    (18) type -> . REAL
    (19) type -> . STRING

    INT             shift and go to state 29
    REAL            shift and go to state 30
    STRING          shift and go to state 31

    type                           shift and go to state 28

state 13

    (21) id_list -> id_list COMA . ID

    ID              shift and go to state 32


state 14

    (1) prog -> VAR dec_list OPEN_FIG stmt_list . CLOSE_FIG
    (23) stmt_list -> stmt_list . SEMI_COLON stmt

    CLOSE_FIG       shift and go to state 33
    SEMI_COLON      shift and go to state 34


state 15

    (22) stmt_list -> stmt .

    CLOSE_FIG       reduce using rule 22 (stmt_list -> stmt .)
    SEMI_COLON      reduce using rule 22 (stmt_list -> stmt .)


state 16

    (24) stmt -> assign .

    CLOSE_FIG       reduce using rule 24 (stmt -> assign .)
    SEMI_COLON      reduce using rule 24 (stmt -> assign .)


state 17

    (25) stmt -> print .

    CLOSE_FIG       reduce using rule 25 (stmt -> print .)
    SEMI_COLON      reduce using rule 25 (stmt -> print .)


state 18

    (26) stmt -> while .

    CLOSE_FIG       reduce using rule 26 (stmt -> while .)
    SEMI_COLON      reduce using rule 26 (stmt -> while .)


state 19

    (27) stmt -> if .

    CLOSE_FIG       reduce using rule 27 (stmt -> if .)
    SEMI_COLON      reduce using rule 27 (stmt -> if .)


state 20

    (44) assign -> ID . PRISV exp
    (45) assign -> ID . PRISV STRING

    PRISV           shift and go to state 35


state 21

    (57) print -> PRINT . OPEN_PAREN exp CLOSE_PAREN
    (58) print -> PRINT . OPEN_PAREN STRING CLOSE_PAREN

    OPEN_PAREN      shift and go to state 36


state 22

    (59) while -> WHILE . bool_exp DO OPEN_FIG stmt_list CLOSE_FIG
    (61) bool_exp -> . bool_exp OR bool_exp_term
    (62) bool_exp -> . bool_exp_term
    (63) bool_exp -> . NOT bool_exp
    (64) bool_exp -> . bool
    (65) bool_exp_term -> . bool_exp_term AND bool
    (66) bool_exp_term -> . bool
    (67) bool -> . OPEN_PAREN exp RAVNO exp CLOSE_PAREN
    (68) bool -> . OPEN_PAREN exp MORE exp CLOSE_PAREN
    (69) bool -> . OPEN_PAREN exp LESS exp CLOSE_PAREN

    NOT             shift and go to state 39
    OPEN_PAREN      shift and go to state 41

    bool_exp                       shift and go to state 37
    bool_exp_term                  shift and go to state 38
    bool                           shift and go to state 40

state 23

    (60) if -> IF . bool_exp THEN OPEN_FIG stmt_list_if CLOSE_FIG
    (61) bool_exp -> . bool_exp OR bool_exp_term
    (62) bool_exp -> . bool_exp_term
    (63) bool_exp -> . NOT bool_exp
    (64) bool_exp -> . bool
    (65) bool_exp_term -> . bool_exp_term AND bool
    (66) bool_exp_term -> . bool
    (67) bool -> . OPEN_PAREN exp RAVNO exp CLOSE_PAREN
    (68) bool -> . OPEN_PAREN exp MORE exp CLOSE_PAREN
    (69) bool -> . OPEN_PAREN exp LESS exp CLOSE_PAREN

    NOT             shift and go to state 39
    OPEN_PAREN      shift and go to state 41

    bool_exp                       shift and go to state 42
    bool_exp_term                  shift and go to state 38
    bool                           shift and go to state 40

state 24

    (2) prog -> VAR dec_list def_list OPEN_FIG . stmt_list CLOSE_FIG
    (22) stmt_list -> . stmt
    (23) stmt_list -> . stmt_list SEMI_COLON stmt
    (24) stmt -> . assign
    (25) stmt -> . print
    (26) stmt -> . while
    (27) stmt -> . if
    (44) assign -> . ID PRISV exp
    (45) assign -> . ID PRISV STRING
    (57) print -> . PRINT OPEN_PAREN exp CLOSE_PAREN
    (58) print -> . PRINT OPEN_PAREN STRING CLOSE_PAREN
    (59) while -> . WHILE bool_exp DO OPEN_FIG stmt_list CLOSE_FIG
    (60) if -> . IF bool_exp THEN OPEN_FIG stmt_list_if CLOSE_FIG

    ID              shift and go to state 20
    PRINT           shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23

    stmt_list                      shift and go to state 43
    stmt                           shift and go to state 15
    assign                         shift and go to state 16
    print                          shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19

state 25

    (4) def_list -> def_list SEMI_COLON . def
    (5) def -> . DEF ID OPEN_PAREN dec_list CLOSE_PAREN OPEN_FIG stmt_list_def CLOSE_FIG
    (6) def -> . DEF ID OPEN_PAREN dec_list CLOSE_PAREN OPEN_FIG VAR dec_list stmt_list_def CLOSE_FIG

    DEF             shift and go to state 11

    def                            shift and go to state 44

state 26

    (15) dec_list -> dec_list SEMI_COLON dec .

    OPEN_FIG        reduce using rule 15 (dec_list -> dec_list SEMI_COLON dec .)
    SEMI_COLON      reduce using rule 15 (dec_list -> dec_list SEMI_COLON dec .)
    DEF             reduce using rule 15 (dec_list -> dec_list SEMI_COLON dec .)
    CLOSE_PAREN     reduce using rule 15 (dec_list -> dec_list SEMI_COLON dec .)
    ID              reduce using rule 15 (dec_list -> dec_list SEMI_COLON dec .)
    PRINT           reduce using rule 15 (dec_list -> dec_list SEMI_COLON dec .)
    WHILE           reduce using rule 15 (dec_list -> dec_list SEMI_COLON dec .)
    IF              reduce using rule 15 (dec_list -> dec_list SEMI_COLON dec .)
    RETURN          reduce using rule 15 (dec_list -> dec_list SEMI_COLON dec .)


state 27

    (5) def -> DEF ID . OPEN_PAREN dec_list CLOSE_PAREN OPEN_FIG stmt_list_def CLOSE_FIG
    (6) def -> DEF ID . OPEN_PAREN dec_list CLOSE_PAREN OPEN_FIG VAR dec_list stmt_list_def CLOSE_FIG

    OPEN_PAREN      shift and go to state 45


state 28

    (16) dec -> id_list DOUBLE_POINT type .

    OPEN_FIG        reduce using rule 16 (dec -> id_list DOUBLE_POINT type .)
    SEMI_COLON      reduce using rule 16 (dec -> id_list DOUBLE_POINT type .)
    DEF             reduce using rule 16 (dec -> id_list DOUBLE_POINT type .)
    CLOSE_PAREN     reduce using rule 16 (dec -> id_list DOUBLE_POINT type .)
    ID              reduce using rule 16 (dec -> id_list DOUBLE_POINT type .)
    PRINT           reduce using rule 16 (dec -> id_list DOUBLE_POINT type .)
    WHILE           reduce using rule 16 (dec -> id_list DOUBLE_POINT type .)
    IF              reduce using rule 16 (dec -> id_list DOUBLE_POINT type .)
    RETURN          reduce using rule 16 (dec -> id_list DOUBLE_POINT type .)


state 29

    (17) type -> INT .

    OPEN_FIG        reduce using rule 17 (type -> INT .)
    SEMI_COLON      reduce using rule 17 (type -> INT .)
    DEF             reduce using rule 17 (type -> INT .)
    CLOSE_PAREN     reduce using rule 17 (type -> INT .)
    ID              reduce using rule 17 (type -> INT .)
    PRINT           reduce using rule 17 (type -> INT .)
    WHILE           reduce using rule 17 (type -> INT .)
    IF              reduce using rule 17 (type -> INT .)
    RETURN          reduce using rule 17 (type -> INT .)


state 30

    (18) type -> REAL .

    OPEN_FIG        reduce using rule 18 (type -> REAL .)
    SEMI_COLON      reduce using rule 18 (type -> REAL .)
    DEF             reduce using rule 18 (type -> REAL .)
    CLOSE_PAREN     reduce using rule 18 (type -> REAL .)
    ID              reduce using rule 18 (type -> REAL .)
    PRINT           reduce using rule 18 (type -> REAL .)
    WHILE           reduce using rule 18 (type -> REAL .)
    IF              reduce using rule 18 (type -> REAL .)
    RETURN          reduce using rule 18 (type -> REAL .)


state 31

    (19) type -> STRING .

    OPEN_FIG        reduce using rule 19 (type -> STRING .)
    SEMI_COLON      reduce using rule 19 (type -> STRING .)
    DEF             reduce using rule 19 (type -> STRING .)
    CLOSE_PAREN     reduce using rule 19 (type -> STRING .)
    ID              reduce using rule 19 (type -> STRING .)
    PRINT           reduce using rule 19 (type -> STRING .)
    WHILE           reduce using rule 19 (type -> STRING .)
    IF              reduce using rule 19 (type -> STRING .)
    RETURN          reduce using rule 19 (type -> STRING .)


state 32

    (21) id_list -> id_list COMA ID .

    DOUBLE_POINT    reduce using rule 21 (id_list -> id_list COMA ID .)
    COMA            reduce using rule 21 (id_list -> id_list COMA ID .)


state 33

    (1) prog -> VAR dec_list OPEN_FIG stmt_list CLOSE_FIG .

    $end            reduce using rule 1 (prog -> VAR dec_list OPEN_FIG stmt_list CLOSE_FIG .)


state 34

    (23) stmt_list -> stmt_list SEMI_COLON . stmt
    (24) stmt -> . assign
    (25) stmt -> . print
    (26) stmt -> . while
    (27) stmt -> . if
    (44) assign -> . ID PRISV exp
    (45) assign -> . ID PRISV STRING
    (57) print -> . PRINT OPEN_PAREN exp CLOSE_PAREN
    (58) print -> . PRINT OPEN_PAREN STRING CLOSE_PAREN
    (59) while -> . WHILE bool_exp DO OPEN_FIG stmt_list CLOSE_FIG
    (60) if -> . IF bool_exp THEN OPEN_FIG stmt_list_if CLOSE_FIG

    ID              shift and go to state 20
    PRINT           shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23

    stmt                           shift and go to state 46
    assign                         shift and go to state 16
    print                          shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19

state 35

    (44) assign -> ID PRISV . exp
    (45) assign -> ID PRISV . STRING
    (46) exp -> . term
    (47) exp -> . exp SUM term
    (48) exp -> . exp SUB term
    (49) term -> . factor
    (50) term -> . term MUL factor
    (51) term -> . term DIV factor
    (52) factor -> . defstmt
    (53) factor -> . ID
    (54) factor -> . NUMBER_INT
    (55) factor -> . NUMBER_REAL
    (56) factor -> . OPEN_PAREN exp CLOSE_PAREN
    (7) defstmt -> . ID OPEN_PAREN args CLOSE_PAREN

    STRING          shift and go to state 49
    ID              shift and go to state 47
    NUMBER_INT      shift and go to state 53
    NUMBER_REAL     shift and go to state 54
    OPEN_PAREN      shift and go to state 55

    exp                            shift and go to state 48
    term                           shift and go to state 50
    factor                         shift and go to state 51
    defstmt                        shift and go to state 52

state 36

    (57) print -> PRINT OPEN_PAREN . exp CLOSE_PAREN
    (58) print -> PRINT OPEN_PAREN . STRING CLOSE_PAREN
    (46) exp -> . term
    (47) exp -> . exp SUM term
    (48) exp -> . exp SUB term
    (49) term -> . factor
    (50) term -> . term MUL factor
    (51) term -> . term DIV factor
    (52) factor -> . defstmt
    (53) factor -> . ID
    (54) factor -> . NUMBER_INT
    (55) factor -> . NUMBER_REAL
    (56) factor -> . OPEN_PAREN exp CLOSE_PAREN
    (7) defstmt -> . ID OPEN_PAREN args CLOSE_PAREN

    STRING          shift and go to state 57
    ID              shift and go to state 47
    NUMBER_INT      shift and go to state 53
    NUMBER_REAL     shift and go to state 54
    OPEN_PAREN      shift and go to state 55

    exp                            shift and go to state 56
    term                           shift and go to state 50
    factor                         shift and go to state 51
    defstmt                        shift and go to state 52

state 37

    (59) while -> WHILE bool_exp . DO OPEN_FIG stmt_list CLOSE_FIG
    (61) bool_exp -> bool_exp . OR bool_exp_term

    DO              shift and go to state 58
    OR              shift and go to state 59


state 38

    (62) bool_exp -> bool_exp_term .
    (65) bool_exp_term -> bool_exp_term . AND bool

    DO              reduce using rule 62 (bool_exp -> bool_exp_term .)
    OR              reduce using rule 62 (bool_exp -> bool_exp_term .)
    THEN            reduce using rule 62 (bool_exp -> bool_exp_term .)
    AND             shift and go to state 60


state 39

    (63) bool_exp -> NOT . bool_exp
    (61) bool_exp -> . bool_exp OR bool_exp_term
    (62) bool_exp -> . bool_exp_term
    (63) bool_exp -> . NOT bool_exp
    (64) bool_exp -> . bool
    (65) bool_exp_term -> . bool_exp_term AND bool
    (66) bool_exp_term -> . bool
    (67) bool -> . OPEN_PAREN exp RAVNO exp CLOSE_PAREN
    (68) bool -> . OPEN_PAREN exp MORE exp CLOSE_PAREN
    (69) bool -> . OPEN_PAREN exp LESS exp CLOSE_PAREN

    NOT             shift and go to state 39
    OPEN_PAREN      shift and go to state 41

    bool_exp                       shift and go to state 61
    bool_exp_term                  shift and go to state 38
    bool                           shift and go to state 40

state 40

    (64) bool_exp -> bool .
    (66) bool_exp_term -> bool .

  ! reduce/reduce conflict for DO resolved using rule 64 (bool_exp -> bool .)
  ! reduce/reduce conflict for OR resolved using rule 64 (bool_exp -> bool .)
  ! reduce/reduce conflict for THEN resolved using rule 64 (bool_exp -> bool .)
    DO              reduce using rule 64 (bool_exp -> bool .)
    OR              reduce using rule 64 (bool_exp -> bool .)
    THEN            reduce using rule 64 (bool_exp -> bool .)
    AND             reduce using rule 66 (bool_exp_term -> bool .)

  ! DO              [ reduce using rule 66 (bool_exp_term -> bool .) ]
  ! OR              [ reduce using rule 66 (bool_exp_term -> bool .) ]
  ! THEN            [ reduce using rule 66 (bool_exp_term -> bool .) ]


state 41

    (67) bool -> OPEN_PAREN . exp RAVNO exp CLOSE_PAREN
    (68) bool -> OPEN_PAREN . exp MORE exp CLOSE_PAREN
    (69) bool -> OPEN_PAREN . exp LESS exp CLOSE_PAREN
    (46) exp -> . term
    (47) exp -> . exp SUM term
    (48) exp -> . exp SUB term
    (49) term -> . factor
    (50) term -> . term MUL factor
    (51) term -> . term DIV factor
    (52) factor -> . defstmt
    (53) factor -> . ID
    (54) factor -> . NUMBER_INT
    (55) factor -> . NUMBER_REAL
    (56) factor -> . OPEN_PAREN exp CLOSE_PAREN
    (7) defstmt -> . ID OPEN_PAREN args CLOSE_PAREN

    ID              shift and go to state 47
    NUMBER_INT      shift and go to state 53
    NUMBER_REAL     shift and go to state 54
    OPEN_PAREN      shift and go to state 55

    exp                            shift and go to state 62
    term                           shift and go to state 50
    factor                         shift and go to state 51
    defstmt                        shift and go to state 52

state 42

    (60) if -> IF bool_exp . THEN OPEN_FIG stmt_list_if CLOSE_FIG
    (61) bool_exp -> bool_exp . OR bool_exp_term

    THEN            shift and go to state 63
    OR              shift and go to state 59


state 43

    (2) prog -> VAR dec_list def_list OPEN_FIG stmt_list . CLOSE_FIG
    (23) stmt_list -> stmt_list . SEMI_COLON stmt

    CLOSE_FIG       shift and go to state 64
    SEMI_COLON      shift and go to state 34


state 44

    (4) def_list -> def_list SEMI_COLON def .

    OPEN_FIG        reduce using rule 4 (def_list -> def_list SEMI_COLON def .)
    SEMI_COLON      reduce using rule 4 (def_list -> def_list SEMI_COLON def .)


state 45

    (5) def -> DEF ID OPEN_PAREN . dec_list CLOSE_PAREN OPEN_FIG stmt_list_def CLOSE_FIG
    (6) def -> DEF ID OPEN_PAREN . dec_list CLOSE_PAREN OPEN_FIG VAR dec_list stmt_list_def CLOSE_FIG
    (14) dec_list -> . dec
    (15) dec_list -> . dec_list SEMI_COLON dec
    (16) dec -> . id_list DOUBLE_POINT type
    (20) id_list -> . ID
    (21) id_list -> . id_list COMA ID

    ID              shift and go to state 6

    dec_list                       shift and go to state 65
    dec                            shift and go to state 4
    id_list                        shift and go to state 5

state 46

    (23) stmt_list -> stmt_list SEMI_COLON stmt .

    CLOSE_FIG       reduce using rule 23 (stmt_list -> stmt_list SEMI_COLON stmt .)
    SEMI_COLON      reduce using rule 23 (stmt_list -> stmt_list SEMI_COLON stmt .)


state 47

    (53) factor -> ID .
    (7) defstmt -> ID . OPEN_PAREN args CLOSE_PAREN

    MUL             reduce using rule 53 (factor -> ID .)
    DIV             reduce using rule 53 (factor -> ID .)
    SUM             reduce using rule 53 (factor -> ID .)
    SUB             reduce using rule 53 (factor -> ID .)
    CLOSE_FIG       reduce using rule 53 (factor -> ID .)
    SEMI_COLON      reduce using rule 53 (factor -> ID .)
    CLOSE_PAREN     reduce using rule 53 (factor -> ID .)
    RAVNO           reduce using rule 53 (factor -> ID .)
    MORE            reduce using rule 53 (factor -> ID .)
    LESS            reduce using rule 53 (factor -> ID .)
    OPEN_PAREN      shift and go to state 66


state 48

    (44) assign -> ID PRISV exp .
    (47) exp -> exp . SUM term
    (48) exp -> exp . SUB term

    CLOSE_FIG       reduce using rule 44 (assign -> ID PRISV exp .)
    SEMI_COLON      reduce using rule 44 (assign -> ID PRISV exp .)
    SUM             shift and go to state 67
    SUB             shift and go to state 68


state 49

    (45) assign -> ID PRISV STRING .

    CLOSE_FIG       reduce using rule 45 (assign -> ID PRISV STRING .)
    SEMI_COLON      reduce using rule 45 (assign -> ID PRISV STRING .)


state 50

    (46) exp -> term .
    (50) term -> term . MUL factor
    (51) term -> term . DIV factor

    SUM             reduce using rule 46 (exp -> term .)
    SUB             reduce using rule 46 (exp -> term .)
    CLOSE_FIG       reduce using rule 46 (exp -> term .)
    SEMI_COLON      reduce using rule 46 (exp -> term .)
    CLOSE_PAREN     reduce using rule 46 (exp -> term .)
    RAVNO           reduce using rule 46 (exp -> term .)
    MORE            reduce using rule 46 (exp -> term .)
    LESS            reduce using rule 46 (exp -> term .)
    MUL             shift and go to state 69
    DIV             shift and go to state 70


state 51

    (49) term -> factor .

    MUL             reduce using rule 49 (term -> factor .)
    DIV             reduce using rule 49 (term -> factor .)
    SUM             reduce using rule 49 (term -> factor .)
    SUB             reduce using rule 49 (term -> factor .)
    CLOSE_FIG       reduce using rule 49 (term -> factor .)
    SEMI_COLON      reduce using rule 49 (term -> factor .)
    CLOSE_PAREN     reduce using rule 49 (term -> factor .)
    RAVNO           reduce using rule 49 (term -> factor .)
    MORE            reduce using rule 49 (term -> factor .)
    LESS            reduce using rule 49 (term -> factor .)


state 52

    (52) factor -> defstmt .

    MUL             reduce using rule 52 (factor -> defstmt .)
    DIV             reduce using rule 52 (factor -> defstmt .)
    SUM             reduce using rule 52 (factor -> defstmt .)
    SUB             reduce using rule 52 (factor -> defstmt .)
    CLOSE_FIG       reduce using rule 52 (factor -> defstmt .)
    SEMI_COLON      reduce using rule 52 (factor -> defstmt .)
    CLOSE_PAREN     reduce using rule 52 (factor -> defstmt .)
    RAVNO           reduce using rule 52 (factor -> defstmt .)
    MORE            reduce using rule 52 (factor -> defstmt .)
    LESS            reduce using rule 52 (factor -> defstmt .)


state 53

    (54) factor -> NUMBER_INT .

    MUL             reduce using rule 54 (factor -> NUMBER_INT .)
    DIV             reduce using rule 54 (factor -> NUMBER_INT .)
    SUM             reduce using rule 54 (factor -> NUMBER_INT .)
    SUB             reduce using rule 54 (factor -> NUMBER_INT .)
    CLOSE_FIG       reduce using rule 54 (factor -> NUMBER_INT .)
    SEMI_COLON      reduce using rule 54 (factor -> NUMBER_INT .)
    CLOSE_PAREN     reduce using rule 54 (factor -> NUMBER_INT .)
    RAVNO           reduce using rule 54 (factor -> NUMBER_INT .)
    MORE            reduce using rule 54 (factor -> NUMBER_INT .)
    LESS            reduce using rule 54 (factor -> NUMBER_INT .)


state 54

    (55) factor -> NUMBER_REAL .

    MUL             reduce using rule 55 (factor -> NUMBER_REAL .)
    DIV             reduce using rule 55 (factor -> NUMBER_REAL .)
    SUM             reduce using rule 55 (factor -> NUMBER_REAL .)
    SUB             reduce using rule 55 (factor -> NUMBER_REAL .)
    CLOSE_FIG       reduce using rule 55 (factor -> NUMBER_REAL .)
    SEMI_COLON      reduce using rule 55 (factor -> NUMBER_REAL .)
    CLOSE_PAREN     reduce using rule 55 (factor -> NUMBER_REAL .)
    RAVNO           reduce using rule 55 (factor -> NUMBER_REAL .)
    MORE            reduce using rule 55 (factor -> NUMBER_REAL .)
    LESS            reduce using rule 55 (factor -> NUMBER_REAL .)


state 55

    (56) factor -> OPEN_PAREN . exp CLOSE_PAREN
    (46) exp -> . term
    (47) exp -> . exp SUM term
    (48) exp -> . exp SUB term
    (49) term -> . factor
    (50) term -> . term MUL factor
    (51) term -> . term DIV factor
    (52) factor -> . defstmt
    (53) factor -> . ID
    (54) factor -> . NUMBER_INT
    (55) factor -> . NUMBER_REAL
    (56) factor -> . OPEN_PAREN exp CLOSE_PAREN
    (7) defstmt -> . ID OPEN_PAREN args CLOSE_PAREN

    ID              shift and go to state 47
    NUMBER_INT      shift and go to state 53
    NUMBER_REAL     shift and go to state 54
    OPEN_PAREN      shift and go to state 55

    exp                            shift and go to state 71
    term                           shift and go to state 50
    factor                         shift and go to state 51
    defstmt                        shift and go to state 52

state 56

    (57) print -> PRINT OPEN_PAREN exp . CLOSE_PAREN
    (47) exp -> exp . SUM term
    (48) exp -> exp . SUB term

    CLOSE_PAREN     shift and go to state 72
    SUM             shift and go to state 67
    SUB             shift and go to state 68


state 57

    (58) print -> PRINT OPEN_PAREN STRING . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 73


state 58

    (59) while -> WHILE bool_exp DO . OPEN_FIG stmt_list CLOSE_FIG

    OPEN_FIG        shift and go to state 74


state 59

    (61) bool_exp -> bool_exp OR . bool_exp_term
    (65) bool_exp_term -> . bool_exp_term AND bool
    (66) bool_exp_term -> . bool
    (67) bool -> . OPEN_PAREN exp RAVNO exp CLOSE_PAREN
    (68) bool -> . OPEN_PAREN exp MORE exp CLOSE_PAREN
    (69) bool -> . OPEN_PAREN exp LESS exp CLOSE_PAREN

    OPEN_PAREN      shift and go to state 41

    bool_exp_term                  shift and go to state 75
    bool                           shift and go to state 76

state 60

    (65) bool_exp_term -> bool_exp_term AND . bool
    (67) bool -> . OPEN_PAREN exp RAVNO exp CLOSE_PAREN
    (68) bool -> . OPEN_PAREN exp MORE exp CLOSE_PAREN
    (69) bool -> . OPEN_PAREN exp LESS exp CLOSE_PAREN

    OPEN_PAREN      shift and go to state 41

    bool                           shift and go to state 77

state 61

    (63) bool_exp -> NOT bool_exp .
    (61) bool_exp -> bool_exp . OR bool_exp_term

  ! shift/reduce conflict for OR resolved as shift
    DO              reduce using rule 63 (bool_exp -> NOT bool_exp .)
    THEN            reduce using rule 63 (bool_exp -> NOT bool_exp .)
    OR              shift and go to state 59

  ! OR              [ reduce using rule 63 (bool_exp -> NOT bool_exp .) ]


state 62

    (67) bool -> OPEN_PAREN exp . RAVNO exp CLOSE_PAREN
    (68) bool -> OPEN_PAREN exp . MORE exp CLOSE_PAREN
    (69) bool -> OPEN_PAREN exp . LESS exp CLOSE_PAREN
    (47) exp -> exp . SUM term
    (48) exp -> exp . SUB term

    RAVNO           shift and go to state 78
    MORE            shift and go to state 79
    LESS            shift and go to state 80
    SUM             shift and go to state 67
    SUB             shift and go to state 68


state 63

    (60) if -> IF bool_exp THEN . OPEN_FIG stmt_list_if CLOSE_FIG

    OPEN_FIG        shift and go to state 81


state 64

    (2) prog -> VAR dec_list def_list OPEN_FIG stmt_list CLOSE_FIG .

    $end            reduce using rule 2 (prog -> VAR dec_list def_list OPEN_FIG stmt_list CLOSE_FIG .)


state 65

    (5) def -> DEF ID OPEN_PAREN dec_list . CLOSE_PAREN OPEN_FIG stmt_list_def CLOSE_FIG
    (6) def -> DEF ID OPEN_PAREN dec_list . CLOSE_PAREN OPEN_FIG VAR dec_list stmt_list_def CLOSE_FIG
    (15) dec_list -> dec_list . SEMI_COLON dec

    CLOSE_PAREN     shift and go to state 82
    SEMI_COLON      shift and go to state 9


state 66

    (7) defstmt -> ID OPEN_PAREN . args CLOSE_PAREN
    (8) args -> . arg
    (9) args -> . args SEMI_COLON arg
    (10) arg -> . ID
    (11) arg -> . NUMBER_INT
    (12) arg -> . NUMBER_REAL
    (13) arg -> . OPEN_PAREN exp CLOSE_PAREN

    ID              shift and go to state 83
    NUMBER_INT      shift and go to state 87
    NUMBER_REAL     shift and go to state 88
    OPEN_PAREN      shift and go to state 84

    args                           shift and go to state 85
    arg                            shift and go to state 86

state 67

    (47) exp -> exp SUM . term
    (49) term -> . factor
    (50) term -> . term MUL factor
    (51) term -> . term DIV factor
    (52) factor -> . defstmt
    (53) factor -> . ID
    (54) factor -> . NUMBER_INT
    (55) factor -> . NUMBER_REAL
    (56) factor -> . OPEN_PAREN exp CLOSE_PAREN
    (7) defstmt -> . ID OPEN_PAREN args CLOSE_PAREN

    ID              shift and go to state 47
    NUMBER_INT      shift and go to state 53
    NUMBER_REAL     shift and go to state 54
    OPEN_PAREN      shift and go to state 55

    term                           shift and go to state 89
    factor                         shift and go to state 51
    defstmt                        shift and go to state 52

state 68

    (48) exp -> exp SUB . term
    (49) term -> . factor
    (50) term -> . term MUL factor
    (51) term -> . term DIV factor
    (52) factor -> . defstmt
    (53) factor -> . ID
    (54) factor -> . NUMBER_INT
    (55) factor -> . NUMBER_REAL
    (56) factor -> . OPEN_PAREN exp CLOSE_PAREN
    (7) defstmt -> . ID OPEN_PAREN args CLOSE_PAREN

    ID              shift and go to state 47
    NUMBER_INT      shift and go to state 53
    NUMBER_REAL     shift and go to state 54
    OPEN_PAREN      shift and go to state 55

    term                           shift and go to state 90
    factor                         shift and go to state 51
    defstmt                        shift and go to state 52

state 69

    (50) term -> term MUL . factor
    (52) factor -> . defstmt
    (53) factor -> . ID
    (54) factor -> . NUMBER_INT
    (55) factor -> . NUMBER_REAL
    (56) factor -> . OPEN_PAREN exp CLOSE_PAREN
    (7) defstmt -> . ID OPEN_PAREN args CLOSE_PAREN

    ID              shift and go to state 47
    NUMBER_INT      shift and go to state 53
    NUMBER_REAL     shift and go to state 54
    OPEN_PAREN      shift and go to state 55

    factor                         shift and go to state 91
    defstmt                        shift and go to state 52

state 70

    (51) term -> term DIV . factor
    (52) factor -> . defstmt
    (53) factor -> . ID
    (54) factor -> . NUMBER_INT
    (55) factor -> . NUMBER_REAL
    (56) factor -> . OPEN_PAREN exp CLOSE_PAREN
    (7) defstmt -> . ID OPEN_PAREN args CLOSE_PAREN

    ID              shift and go to state 47
    NUMBER_INT      shift and go to state 53
    NUMBER_REAL     shift and go to state 54
    OPEN_PAREN      shift and go to state 55

    factor                         shift and go to state 92
    defstmt                        shift and go to state 52

state 71

    (56) factor -> OPEN_PAREN exp . CLOSE_PAREN
    (47) exp -> exp . SUM term
    (48) exp -> exp . SUB term

    CLOSE_PAREN     shift and go to state 93
    SUM             shift and go to state 67
    SUB             shift and go to state 68


state 72

    (57) print -> PRINT OPEN_PAREN exp CLOSE_PAREN .

    CLOSE_FIG       reduce using rule 57 (print -> PRINT OPEN_PAREN exp CLOSE_PAREN .)
    SEMI_COLON      reduce using rule 57 (print -> PRINT OPEN_PAREN exp CLOSE_PAREN .)


state 73

    (58) print -> PRINT OPEN_PAREN STRING CLOSE_PAREN .

    CLOSE_FIG       reduce using rule 58 (print -> PRINT OPEN_PAREN STRING CLOSE_PAREN .)
    SEMI_COLON      reduce using rule 58 (print -> PRINT OPEN_PAREN STRING CLOSE_PAREN .)


state 74

    (59) while -> WHILE bool_exp DO OPEN_FIG . stmt_list CLOSE_FIG
    (22) stmt_list -> . stmt
    (23) stmt_list -> . stmt_list SEMI_COLON stmt
    (24) stmt -> . assign
    (25) stmt -> . print
    (26) stmt -> . while
    (27) stmt -> . if
    (44) assign -> . ID PRISV exp
    (45) assign -> . ID PRISV STRING
    (57) print -> . PRINT OPEN_PAREN exp CLOSE_PAREN
    (58) print -> . PRINT OPEN_PAREN STRING CLOSE_PAREN
    (59) while -> . WHILE bool_exp DO OPEN_FIG stmt_list CLOSE_FIG
    (60) if -> . IF bool_exp THEN OPEN_FIG stmt_list_if CLOSE_FIG

    ID              shift and go to state 20
    PRINT           shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23

    stmt_list                      shift and go to state 94
    stmt                           shift and go to state 15
    assign                         shift and go to state 16
    print                          shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19

state 75

    (61) bool_exp -> bool_exp OR bool_exp_term .
    (65) bool_exp_term -> bool_exp_term . AND bool

    DO              reduce using rule 61 (bool_exp -> bool_exp OR bool_exp_term .)
    OR              reduce using rule 61 (bool_exp -> bool_exp OR bool_exp_term .)
    THEN            reduce using rule 61 (bool_exp -> bool_exp OR bool_exp_term .)
    AND             shift and go to state 60


state 76

    (66) bool_exp_term -> bool .

    AND             reduce using rule 66 (bool_exp_term -> bool .)
    DO              reduce using rule 66 (bool_exp_term -> bool .)
    OR              reduce using rule 66 (bool_exp_term -> bool .)
    THEN            reduce using rule 66 (bool_exp_term -> bool .)


state 77

    (65) bool_exp_term -> bool_exp_term AND bool .

    AND             reduce using rule 65 (bool_exp_term -> bool_exp_term AND bool .)
    DO              reduce using rule 65 (bool_exp_term -> bool_exp_term AND bool .)
    OR              reduce using rule 65 (bool_exp_term -> bool_exp_term AND bool .)
    THEN            reduce using rule 65 (bool_exp_term -> bool_exp_term AND bool .)


state 78

    (67) bool -> OPEN_PAREN exp RAVNO . exp CLOSE_PAREN
    (46) exp -> . term
    (47) exp -> . exp SUM term
    (48) exp -> . exp SUB term
    (49) term -> . factor
    (50) term -> . term MUL factor
    (51) term -> . term DIV factor
    (52) factor -> . defstmt
    (53) factor -> . ID
    (54) factor -> . NUMBER_INT
    (55) factor -> . NUMBER_REAL
    (56) factor -> . OPEN_PAREN exp CLOSE_PAREN
    (7) defstmt -> . ID OPEN_PAREN args CLOSE_PAREN

    ID              shift and go to state 47
    NUMBER_INT      shift and go to state 53
    NUMBER_REAL     shift and go to state 54
    OPEN_PAREN      shift and go to state 55

    exp                            shift and go to state 95
    term                           shift and go to state 50
    factor                         shift and go to state 51
    defstmt                        shift and go to state 52

state 79

    (68) bool -> OPEN_PAREN exp MORE . exp CLOSE_PAREN
    (46) exp -> . term
    (47) exp -> . exp SUM term
    (48) exp -> . exp SUB term
    (49) term -> . factor
    (50) term -> . term MUL factor
    (51) term -> . term DIV factor
    (52) factor -> . defstmt
    (53) factor -> . ID
    (54) factor -> . NUMBER_INT
    (55) factor -> . NUMBER_REAL
    (56) factor -> . OPEN_PAREN exp CLOSE_PAREN
    (7) defstmt -> . ID OPEN_PAREN args CLOSE_PAREN

    ID              shift and go to state 47
    NUMBER_INT      shift and go to state 53
    NUMBER_REAL     shift and go to state 54
    OPEN_PAREN      shift and go to state 55

    exp                            shift and go to state 96
    term                           shift and go to state 50
    factor                         shift and go to state 51
    defstmt                        shift and go to state 52

state 80

    (69) bool -> OPEN_PAREN exp LESS . exp CLOSE_PAREN
    (46) exp -> . term
    (47) exp -> . exp SUM term
    (48) exp -> . exp SUB term
    (49) term -> . factor
    (50) term -> . term MUL factor
    (51) term -> . term DIV factor
    (52) factor -> . defstmt
    (53) factor -> . ID
    (54) factor -> . NUMBER_INT
    (55) factor -> . NUMBER_REAL
    (56) factor -> . OPEN_PAREN exp CLOSE_PAREN
    (7) defstmt -> . ID OPEN_PAREN args CLOSE_PAREN

    ID              shift and go to state 47
    NUMBER_INT      shift and go to state 53
    NUMBER_REAL     shift and go to state 54
    OPEN_PAREN      shift and go to state 55

    exp                            shift and go to state 97
    term                           shift and go to state 50
    factor                         shift and go to state 51
    defstmt                        shift and go to state 52

state 81

    (60) if -> IF bool_exp THEN OPEN_FIG . stmt_list_if CLOSE_FIG
    (28) stmt_list_if -> . stmt_if
    (29) stmt_list_if -> . stmt_list_if SEMI_COLON stmt_if
    (30) stmt_if -> . assign
    (31) stmt_if -> . print
    (32) stmt_if -> . while
    (33) stmt_if -> . if
    (34) stmt_if -> . CONTINUE
    (35) stmt_if -> . BREAK
    (44) assign -> . ID PRISV exp
    (45) assign -> . ID PRISV STRING
    (57) print -> . PRINT OPEN_PAREN exp CLOSE_PAREN
    (58) print -> . PRINT OPEN_PAREN STRING CLOSE_PAREN
    (59) while -> . WHILE bool_exp DO OPEN_FIG stmt_list CLOSE_FIG
    (60) if -> . IF bool_exp THEN OPEN_FIG stmt_list_if CLOSE_FIG

    CONTINUE        shift and go to state 104
    BREAK           shift and go to state 105
    ID              shift and go to state 20
    PRINT           shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23

    stmt_list_if                   shift and go to state 98
    stmt_if                        shift and go to state 99
    assign                         shift and go to state 100
    print                          shift and go to state 101
    while                          shift and go to state 102
    if                             shift and go to state 103

state 82

    (5) def -> DEF ID OPEN_PAREN dec_list CLOSE_PAREN . OPEN_FIG stmt_list_def CLOSE_FIG
    (6) def -> DEF ID OPEN_PAREN dec_list CLOSE_PAREN . OPEN_FIG VAR dec_list stmt_list_def CLOSE_FIG

    OPEN_FIG        shift and go to state 106


state 83

    (10) arg -> ID .

    CLOSE_PAREN     reduce using rule 10 (arg -> ID .)
    SEMI_COLON      reduce using rule 10 (arg -> ID .)


state 84

    (13) arg -> OPEN_PAREN . exp CLOSE_PAREN
    (46) exp -> . term
    (47) exp -> . exp SUM term
    (48) exp -> . exp SUB term
    (49) term -> . factor
    (50) term -> . term MUL factor
    (51) term -> . term DIV factor
    (52) factor -> . defstmt
    (53) factor -> . ID
    (54) factor -> . NUMBER_INT
    (55) factor -> . NUMBER_REAL
    (56) factor -> . OPEN_PAREN exp CLOSE_PAREN
    (7) defstmt -> . ID OPEN_PAREN args CLOSE_PAREN

    ID              shift and go to state 47
    NUMBER_INT      shift and go to state 53
    NUMBER_REAL     shift and go to state 54
    OPEN_PAREN      shift and go to state 55

    exp                            shift and go to state 107
    term                           shift and go to state 50
    factor                         shift and go to state 51
    defstmt                        shift and go to state 52

state 85

    (7) defstmt -> ID OPEN_PAREN args . CLOSE_PAREN
    (9) args -> args . SEMI_COLON arg

    CLOSE_PAREN     shift and go to state 108
    SEMI_COLON      shift and go to state 109


state 86

    (8) args -> arg .

    CLOSE_PAREN     reduce using rule 8 (args -> arg .)
    SEMI_COLON      reduce using rule 8 (args -> arg .)


state 87

    (11) arg -> NUMBER_INT .

    CLOSE_PAREN     reduce using rule 11 (arg -> NUMBER_INT .)
    SEMI_COLON      reduce using rule 11 (arg -> NUMBER_INT .)


state 88

    (12) arg -> NUMBER_REAL .

    CLOSE_PAREN     reduce using rule 12 (arg -> NUMBER_REAL .)
    SEMI_COLON      reduce using rule 12 (arg -> NUMBER_REAL .)


state 89

    (47) exp -> exp SUM term .
    (50) term -> term . MUL factor
    (51) term -> term . DIV factor

    SUM             reduce using rule 47 (exp -> exp SUM term .)
    SUB             reduce using rule 47 (exp -> exp SUM term .)
    CLOSE_FIG       reduce using rule 47 (exp -> exp SUM term .)
    SEMI_COLON      reduce using rule 47 (exp -> exp SUM term .)
    CLOSE_PAREN     reduce using rule 47 (exp -> exp SUM term .)
    RAVNO           reduce using rule 47 (exp -> exp SUM term .)
    MORE            reduce using rule 47 (exp -> exp SUM term .)
    LESS            reduce using rule 47 (exp -> exp SUM term .)
    MUL             shift and go to state 69
    DIV             shift and go to state 70


state 90

    (48) exp -> exp SUB term .
    (50) term -> term . MUL factor
    (51) term -> term . DIV factor

    SUM             reduce using rule 48 (exp -> exp SUB term .)
    SUB             reduce using rule 48 (exp -> exp SUB term .)
    CLOSE_FIG       reduce using rule 48 (exp -> exp SUB term .)
    SEMI_COLON      reduce using rule 48 (exp -> exp SUB term .)
    CLOSE_PAREN     reduce using rule 48 (exp -> exp SUB term .)
    RAVNO           reduce using rule 48 (exp -> exp SUB term .)
    MORE            reduce using rule 48 (exp -> exp SUB term .)
    LESS            reduce using rule 48 (exp -> exp SUB term .)
    MUL             shift and go to state 69
    DIV             shift and go to state 70


state 91

    (50) term -> term MUL factor .

    MUL             reduce using rule 50 (term -> term MUL factor .)
    DIV             reduce using rule 50 (term -> term MUL factor .)
    SUM             reduce using rule 50 (term -> term MUL factor .)
    SUB             reduce using rule 50 (term -> term MUL factor .)
    CLOSE_FIG       reduce using rule 50 (term -> term MUL factor .)
    SEMI_COLON      reduce using rule 50 (term -> term MUL factor .)
    CLOSE_PAREN     reduce using rule 50 (term -> term MUL factor .)
    RAVNO           reduce using rule 50 (term -> term MUL factor .)
    MORE            reduce using rule 50 (term -> term MUL factor .)
    LESS            reduce using rule 50 (term -> term MUL factor .)


state 92

    (51) term -> term DIV factor .

    MUL             reduce using rule 51 (term -> term DIV factor .)
    DIV             reduce using rule 51 (term -> term DIV factor .)
    SUM             reduce using rule 51 (term -> term DIV factor .)
    SUB             reduce using rule 51 (term -> term DIV factor .)
    CLOSE_FIG       reduce using rule 51 (term -> term DIV factor .)
    SEMI_COLON      reduce using rule 51 (term -> term DIV factor .)
    CLOSE_PAREN     reduce using rule 51 (term -> term DIV factor .)
    RAVNO           reduce using rule 51 (term -> term DIV factor .)
    MORE            reduce using rule 51 (term -> term DIV factor .)
    LESS            reduce using rule 51 (term -> term DIV factor .)


state 93

    (56) factor -> OPEN_PAREN exp CLOSE_PAREN .

    MUL             reduce using rule 56 (factor -> OPEN_PAREN exp CLOSE_PAREN .)
    DIV             reduce using rule 56 (factor -> OPEN_PAREN exp CLOSE_PAREN .)
    SUM             reduce using rule 56 (factor -> OPEN_PAREN exp CLOSE_PAREN .)
    SUB             reduce using rule 56 (factor -> OPEN_PAREN exp CLOSE_PAREN .)
    CLOSE_FIG       reduce using rule 56 (factor -> OPEN_PAREN exp CLOSE_PAREN .)
    SEMI_COLON      reduce using rule 56 (factor -> OPEN_PAREN exp CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 56 (factor -> OPEN_PAREN exp CLOSE_PAREN .)
    RAVNO           reduce using rule 56 (factor -> OPEN_PAREN exp CLOSE_PAREN .)
    MORE            reduce using rule 56 (factor -> OPEN_PAREN exp CLOSE_PAREN .)
    LESS            reduce using rule 56 (factor -> OPEN_PAREN exp CLOSE_PAREN .)


state 94

    (59) while -> WHILE bool_exp DO OPEN_FIG stmt_list . CLOSE_FIG
    (23) stmt_list -> stmt_list . SEMI_COLON stmt

    CLOSE_FIG       shift and go to state 110
    SEMI_COLON      shift and go to state 34


state 95

    (67) bool -> OPEN_PAREN exp RAVNO exp . CLOSE_PAREN
    (47) exp -> exp . SUM term
    (48) exp -> exp . SUB term

    CLOSE_PAREN     shift and go to state 111
    SUM             shift and go to state 67
    SUB             shift and go to state 68


state 96

    (68) bool -> OPEN_PAREN exp MORE exp . CLOSE_PAREN
    (47) exp -> exp . SUM term
    (48) exp -> exp . SUB term

    CLOSE_PAREN     shift and go to state 112
    SUM             shift and go to state 67
    SUB             shift and go to state 68


state 97

    (69) bool -> OPEN_PAREN exp LESS exp . CLOSE_PAREN
    (47) exp -> exp . SUM term
    (48) exp -> exp . SUB term

    CLOSE_PAREN     shift and go to state 113
    SUM             shift and go to state 67
    SUB             shift and go to state 68


state 98

    (60) if -> IF bool_exp THEN OPEN_FIG stmt_list_if . CLOSE_FIG
    (29) stmt_list_if -> stmt_list_if . SEMI_COLON stmt_if

    CLOSE_FIG       shift and go to state 114
    SEMI_COLON      shift and go to state 115


state 99

    (28) stmt_list_if -> stmt_if .

    CLOSE_FIG       reduce using rule 28 (stmt_list_if -> stmt_if .)
    SEMI_COLON      reduce using rule 28 (stmt_list_if -> stmt_if .)


state 100

    (30) stmt_if -> assign .

    CLOSE_FIG       reduce using rule 30 (stmt_if -> assign .)
    SEMI_COLON      reduce using rule 30 (stmt_if -> assign .)


state 101

    (31) stmt_if -> print .

    CLOSE_FIG       reduce using rule 31 (stmt_if -> print .)
    SEMI_COLON      reduce using rule 31 (stmt_if -> print .)


state 102

    (32) stmt_if -> while .

    CLOSE_FIG       reduce using rule 32 (stmt_if -> while .)
    SEMI_COLON      reduce using rule 32 (stmt_if -> while .)


state 103

    (33) stmt_if -> if .

    CLOSE_FIG       reduce using rule 33 (stmt_if -> if .)
    SEMI_COLON      reduce using rule 33 (stmt_if -> if .)


state 104

    (34) stmt_if -> CONTINUE .

    CLOSE_FIG       reduce using rule 34 (stmt_if -> CONTINUE .)
    SEMI_COLON      reduce using rule 34 (stmt_if -> CONTINUE .)


state 105

    (35) stmt_if -> BREAK .

    CLOSE_FIG       reduce using rule 35 (stmt_if -> BREAK .)
    SEMI_COLON      reduce using rule 35 (stmt_if -> BREAK .)


state 106

    (5) def -> DEF ID OPEN_PAREN dec_list CLOSE_PAREN OPEN_FIG . stmt_list_def CLOSE_FIG
    (6) def -> DEF ID OPEN_PAREN dec_list CLOSE_PAREN OPEN_FIG . VAR dec_list stmt_list_def CLOSE_FIG
    (36) stmt_list_def -> . stmt_def
    (37) stmt_list_def -> . stmt_list_def SEMI_COLON stmt_def
    (38) stmt_def -> . assign
    (39) stmt_def -> . print
    (40) stmt_def -> . while
    (41) stmt_def -> . if
    (42) stmt_def -> . return
    (44) assign -> . ID PRISV exp
    (45) assign -> . ID PRISV STRING
    (57) print -> . PRINT OPEN_PAREN exp CLOSE_PAREN
    (58) print -> . PRINT OPEN_PAREN STRING CLOSE_PAREN
    (59) while -> . WHILE bool_exp DO OPEN_FIG stmt_list CLOSE_FIG
    (60) if -> . IF bool_exp THEN OPEN_FIG stmt_list_if CLOSE_FIG
    (43) return -> . RETURN exp

    VAR             shift and go to state 117
    ID              shift and go to state 20
    PRINT           shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    RETURN          shift and go to state 124

    stmt_list_def                  shift and go to state 116
    stmt_def                       shift and go to state 118
    assign                         shift and go to state 119
    print                          shift and go to state 120
    while                          shift and go to state 121
    if                             shift and go to state 122
    return                         shift and go to state 123

state 107

    (13) arg -> OPEN_PAREN exp . CLOSE_PAREN
    (47) exp -> exp . SUM term
    (48) exp -> exp . SUB term

    CLOSE_PAREN     shift and go to state 125
    SUM             shift and go to state 67
    SUB             shift and go to state 68


state 108

    (7) defstmt -> ID OPEN_PAREN args CLOSE_PAREN .

    MUL             reduce using rule 7 (defstmt -> ID OPEN_PAREN args CLOSE_PAREN .)
    DIV             reduce using rule 7 (defstmt -> ID OPEN_PAREN args CLOSE_PAREN .)
    SUM             reduce using rule 7 (defstmt -> ID OPEN_PAREN args CLOSE_PAREN .)
    SUB             reduce using rule 7 (defstmt -> ID OPEN_PAREN args CLOSE_PAREN .)
    CLOSE_FIG       reduce using rule 7 (defstmt -> ID OPEN_PAREN args CLOSE_PAREN .)
    SEMI_COLON      reduce using rule 7 (defstmt -> ID OPEN_PAREN args CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 7 (defstmt -> ID OPEN_PAREN args CLOSE_PAREN .)
    RAVNO           reduce using rule 7 (defstmt -> ID OPEN_PAREN args CLOSE_PAREN .)
    MORE            reduce using rule 7 (defstmt -> ID OPEN_PAREN args CLOSE_PAREN .)
    LESS            reduce using rule 7 (defstmt -> ID OPEN_PAREN args CLOSE_PAREN .)


state 109

    (9) args -> args SEMI_COLON . arg
    (10) arg -> . ID
    (11) arg -> . NUMBER_INT
    (12) arg -> . NUMBER_REAL
    (13) arg -> . OPEN_PAREN exp CLOSE_PAREN

    ID              shift and go to state 83
    NUMBER_INT      shift and go to state 87
    NUMBER_REAL     shift and go to state 88
    OPEN_PAREN      shift and go to state 84

    arg                            shift and go to state 126

state 110

    (59) while -> WHILE bool_exp DO OPEN_FIG stmt_list CLOSE_FIG .

    CLOSE_FIG       reduce using rule 59 (while -> WHILE bool_exp DO OPEN_FIG stmt_list CLOSE_FIG .)
    SEMI_COLON      reduce using rule 59 (while -> WHILE bool_exp DO OPEN_FIG stmt_list CLOSE_FIG .)


state 111

    (67) bool -> OPEN_PAREN exp RAVNO exp CLOSE_PAREN .

    DO              reduce using rule 67 (bool -> OPEN_PAREN exp RAVNO exp CLOSE_PAREN .)
    OR              reduce using rule 67 (bool -> OPEN_PAREN exp RAVNO exp CLOSE_PAREN .)
    AND             reduce using rule 67 (bool -> OPEN_PAREN exp RAVNO exp CLOSE_PAREN .)
    THEN            reduce using rule 67 (bool -> OPEN_PAREN exp RAVNO exp CLOSE_PAREN .)


state 112

    (68) bool -> OPEN_PAREN exp MORE exp CLOSE_PAREN .

    DO              reduce using rule 68 (bool -> OPEN_PAREN exp MORE exp CLOSE_PAREN .)
    OR              reduce using rule 68 (bool -> OPEN_PAREN exp MORE exp CLOSE_PAREN .)
    AND             reduce using rule 68 (bool -> OPEN_PAREN exp MORE exp CLOSE_PAREN .)
    THEN            reduce using rule 68 (bool -> OPEN_PAREN exp MORE exp CLOSE_PAREN .)


state 113

    (69) bool -> OPEN_PAREN exp LESS exp CLOSE_PAREN .

    DO              reduce using rule 69 (bool -> OPEN_PAREN exp LESS exp CLOSE_PAREN .)
    OR              reduce using rule 69 (bool -> OPEN_PAREN exp LESS exp CLOSE_PAREN .)
    AND             reduce using rule 69 (bool -> OPEN_PAREN exp LESS exp CLOSE_PAREN .)
    THEN            reduce using rule 69 (bool -> OPEN_PAREN exp LESS exp CLOSE_PAREN .)


state 114

    (60) if -> IF bool_exp THEN OPEN_FIG stmt_list_if CLOSE_FIG .

    CLOSE_FIG       reduce using rule 60 (if -> IF bool_exp THEN OPEN_FIG stmt_list_if CLOSE_FIG .)
    SEMI_COLON      reduce using rule 60 (if -> IF bool_exp THEN OPEN_FIG stmt_list_if CLOSE_FIG .)


state 115

    (29) stmt_list_if -> stmt_list_if SEMI_COLON . stmt_if
    (30) stmt_if -> . assign
    (31) stmt_if -> . print
    (32) stmt_if -> . while
    (33) stmt_if -> . if
    (34) stmt_if -> . CONTINUE
    (35) stmt_if -> . BREAK
    (44) assign -> . ID PRISV exp
    (45) assign -> . ID PRISV STRING
    (57) print -> . PRINT OPEN_PAREN exp CLOSE_PAREN
    (58) print -> . PRINT OPEN_PAREN STRING CLOSE_PAREN
    (59) while -> . WHILE bool_exp DO OPEN_FIG stmt_list CLOSE_FIG
    (60) if -> . IF bool_exp THEN OPEN_FIG stmt_list_if CLOSE_FIG

    CONTINUE        shift and go to state 104
    BREAK           shift and go to state 105
    ID              shift and go to state 20
    PRINT           shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23

    stmt_if                        shift and go to state 127
    assign                         shift and go to state 100
    print                          shift and go to state 101
    while                          shift and go to state 102
    if                             shift and go to state 103

state 116

    (5) def -> DEF ID OPEN_PAREN dec_list CLOSE_PAREN OPEN_FIG stmt_list_def . CLOSE_FIG
    (37) stmt_list_def -> stmt_list_def . SEMI_COLON stmt_def

    CLOSE_FIG       shift and go to state 128
    SEMI_COLON      shift and go to state 129


state 117

    (6) def -> DEF ID OPEN_PAREN dec_list CLOSE_PAREN OPEN_FIG VAR . dec_list stmt_list_def CLOSE_FIG
    (14) dec_list -> . dec
    (15) dec_list -> . dec_list SEMI_COLON dec
    (16) dec -> . id_list DOUBLE_POINT type
    (20) id_list -> . ID
    (21) id_list -> . id_list COMA ID

    ID              shift and go to state 6

    dec_list                       shift and go to state 130
    dec                            shift and go to state 4
    id_list                        shift and go to state 5

state 118

    (36) stmt_list_def -> stmt_def .

    CLOSE_FIG       reduce using rule 36 (stmt_list_def -> stmt_def .)
    SEMI_COLON      reduce using rule 36 (stmt_list_def -> stmt_def .)


state 119

    (38) stmt_def -> assign .

    CLOSE_FIG       reduce using rule 38 (stmt_def -> assign .)
    SEMI_COLON      reduce using rule 38 (stmt_def -> assign .)


state 120

    (39) stmt_def -> print .

    CLOSE_FIG       reduce using rule 39 (stmt_def -> print .)
    SEMI_COLON      reduce using rule 39 (stmt_def -> print .)


state 121

    (40) stmt_def -> while .

    CLOSE_FIG       reduce using rule 40 (stmt_def -> while .)
    SEMI_COLON      reduce using rule 40 (stmt_def -> while .)


state 122

    (41) stmt_def -> if .

    CLOSE_FIG       reduce using rule 41 (stmt_def -> if .)
    SEMI_COLON      reduce using rule 41 (stmt_def -> if .)


state 123

    (42) stmt_def -> return .

    CLOSE_FIG       reduce using rule 42 (stmt_def -> return .)
    SEMI_COLON      reduce using rule 42 (stmt_def -> return .)


state 124

    (43) return -> RETURN . exp
    (46) exp -> . term
    (47) exp -> . exp SUM term
    (48) exp -> . exp SUB term
    (49) term -> . factor
    (50) term -> . term MUL factor
    (51) term -> . term DIV factor
    (52) factor -> . defstmt
    (53) factor -> . ID
    (54) factor -> . NUMBER_INT
    (55) factor -> . NUMBER_REAL
    (56) factor -> . OPEN_PAREN exp CLOSE_PAREN
    (7) defstmt -> . ID OPEN_PAREN args CLOSE_PAREN

    ID              shift and go to state 47
    NUMBER_INT      shift and go to state 53
    NUMBER_REAL     shift and go to state 54
    OPEN_PAREN      shift and go to state 55

    exp                            shift and go to state 131
    term                           shift and go to state 50
    factor                         shift and go to state 51
    defstmt                        shift and go to state 52

state 125

    (13) arg -> OPEN_PAREN exp CLOSE_PAREN .

    CLOSE_PAREN     reduce using rule 13 (arg -> OPEN_PAREN exp CLOSE_PAREN .)
    SEMI_COLON      reduce using rule 13 (arg -> OPEN_PAREN exp CLOSE_PAREN .)


state 126

    (9) args -> args SEMI_COLON arg .

    CLOSE_PAREN     reduce using rule 9 (args -> args SEMI_COLON arg .)
    SEMI_COLON      reduce using rule 9 (args -> args SEMI_COLON arg .)


state 127

    (29) stmt_list_if -> stmt_list_if SEMI_COLON stmt_if .

    CLOSE_FIG       reduce using rule 29 (stmt_list_if -> stmt_list_if SEMI_COLON stmt_if .)
    SEMI_COLON      reduce using rule 29 (stmt_list_if -> stmt_list_if SEMI_COLON stmt_if .)


state 128

    (5) def -> DEF ID OPEN_PAREN dec_list CLOSE_PAREN OPEN_FIG stmt_list_def CLOSE_FIG .

    OPEN_FIG        reduce using rule 5 (def -> DEF ID OPEN_PAREN dec_list CLOSE_PAREN OPEN_FIG stmt_list_def CLOSE_FIG .)
    SEMI_COLON      reduce using rule 5 (def -> DEF ID OPEN_PAREN dec_list CLOSE_PAREN OPEN_FIG stmt_list_def CLOSE_FIG .)


state 129

    (37) stmt_list_def -> stmt_list_def SEMI_COLON . stmt_def
    (38) stmt_def -> . assign
    (39) stmt_def -> . print
    (40) stmt_def -> . while
    (41) stmt_def -> . if
    (42) stmt_def -> . return
    (44) assign -> . ID PRISV exp
    (45) assign -> . ID PRISV STRING
    (57) print -> . PRINT OPEN_PAREN exp CLOSE_PAREN
    (58) print -> . PRINT OPEN_PAREN STRING CLOSE_PAREN
    (59) while -> . WHILE bool_exp DO OPEN_FIG stmt_list CLOSE_FIG
    (60) if -> . IF bool_exp THEN OPEN_FIG stmt_list_if CLOSE_FIG
    (43) return -> . RETURN exp

    ID              shift and go to state 20
    PRINT           shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    RETURN          shift and go to state 124

    stmt_def                       shift and go to state 132
    assign                         shift and go to state 119
    print                          shift and go to state 120
    while                          shift and go to state 121
    if                             shift and go to state 122
    return                         shift and go to state 123

state 130

    (6) def -> DEF ID OPEN_PAREN dec_list CLOSE_PAREN OPEN_FIG VAR dec_list . stmt_list_def CLOSE_FIG
    (15) dec_list -> dec_list . SEMI_COLON dec
    (36) stmt_list_def -> . stmt_def
    (37) stmt_list_def -> . stmt_list_def SEMI_COLON stmt_def
    (38) stmt_def -> . assign
    (39) stmt_def -> . print
    (40) stmt_def -> . while
    (41) stmt_def -> . if
    (42) stmt_def -> . return
    (44) assign -> . ID PRISV exp
    (45) assign -> . ID PRISV STRING
    (57) print -> . PRINT OPEN_PAREN exp CLOSE_PAREN
    (58) print -> . PRINT OPEN_PAREN STRING CLOSE_PAREN
    (59) while -> . WHILE bool_exp DO OPEN_FIG stmt_list CLOSE_FIG
    (60) if -> . IF bool_exp THEN OPEN_FIG stmt_list_if CLOSE_FIG
    (43) return -> . RETURN exp

    SEMI_COLON      shift and go to state 9
    ID              shift and go to state 20
    PRINT           shift and go to state 21
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    RETURN          shift and go to state 124

    stmt_list_def                  shift and go to state 133
    stmt_def                       shift and go to state 118
    assign                         shift and go to state 119
    print                          shift and go to state 120
    while                          shift and go to state 121
    if                             shift and go to state 122
    return                         shift and go to state 123

state 131

    (43) return -> RETURN exp .
    (47) exp -> exp . SUM term
    (48) exp -> exp . SUB term

    CLOSE_FIG       reduce using rule 43 (return -> RETURN exp .)
    SEMI_COLON      reduce using rule 43 (return -> RETURN exp .)
    SUM             shift and go to state 67
    SUB             shift and go to state 68


state 132

    (37) stmt_list_def -> stmt_list_def SEMI_COLON stmt_def .

    CLOSE_FIG       reduce using rule 37 (stmt_list_def -> stmt_list_def SEMI_COLON stmt_def .)
    SEMI_COLON      reduce using rule 37 (stmt_list_def -> stmt_list_def SEMI_COLON stmt_def .)


state 133

    (6) def -> DEF ID OPEN_PAREN dec_list CLOSE_PAREN OPEN_FIG VAR dec_list stmt_list_def . CLOSE_FIG
    (37) stmt_list_def -> stmt_list_def . SEMI_COLON stmt_def

    CLOSE_FIG       shift and go to state 134
    SEMI_COLON      shift and go to state 129


state 134

    (6) def -> DEF ID OPEN_PAREN dec_list CLOSE_PAREN OPEN_FIG VAR dec_list stmt_list_def CLOSE_FIG .

    OPEN_FIG        reduce using rule 6 (def -> DEF ID OPEN_PAREN dec_list CLOSE_PAREN OPEN_FIG VAR dec_list stmt_list_def CLOSE_FIG .)
    SEMI_COLON      reduce using rule 6 (def -> DEF ID OPEN_PAREN dec_list CLOSE_PAREN OPEN_FIG VAR dec_list stmt_list_def CLOSE_FIG .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for OR in state 61 resolved as shift
WARNING: reduce/reduce conflict in state 40 resolved using rule (bool_exp -> bool)
WARNING: rejected rule (bool_exp_term -> bool) in state 40
